{"version":3,"sources":["components/PhotoSlide/PhotoSlide.module.scss","static/images/london.png","components/NavBar/NavBar.module.scss","components/CardList/Card/Card.module.scss","components/NavBar/NavItem/NavItem.module.scss","components/CardList/CardList.module.scss","static/images/paris.png","static/images/newyork.png","static/images/sydney.png","static/images/berlin.png","static/images/madrid.png","components/NavBar/NavItem/NavItem.jsx","components/NavBar/index.js","components/NavBar/NavBar.jsx","components/CardList/Card/index.js","components/CardList/Card/Card.jsx","components/CardList/index.js","components/CardList/CardList.jsx","containers/routes/Routes.jsx","components/PhotoSlide/index.js","components/PhotoSlide/PhotoSlide.jsx","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavItem","className","styles","NavList","Component","NavBar","pageNav","route","name","Card","CardBox","this","props","city","weatherData","main","temp","description","humidity","temp_min","temp_max","CardList","state","cityName","city_id","image","require","filteredCities","string","forEach","fetch","then","response","json","cities","setState","map","index","key","Routes","noThrow","from","to","PhotoSlide","photoBox","photo","src","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9087b8e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoBox\":\"PhotoSlide_photoBox__InoSj\",\"photo\":\"PhotoSlide_photo__2V7S1\"};","module.exports = __webpack_public_path__ + \"static/media/london.ebf250b7.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__2auYs\",\"pageNav\":\"NavBar_pageNav__2E5xo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__1IO7P\",\"weatherData\":\"Card_weatherData__Irsv0\",\"photo\":\"Card_photo__3BPMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavList\":\"NavItem_NavList__1bi2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardList\":\"CardList_CardList__3d5vT\"};","module.exports = __webpack_public_path__ + \"static/media/paris.4d5ea4da.png\";","module.exports = __webpack_public_path__ + \"static/media/newyork.cb91bd25.png\";","module.exports = __webpack_public_path__ + \"static/media/sydney.176d34b6.png\";","module.exports = __webpack_public_path__ + \"static/media/berlin.b3b46f3d.png\";","module.exports = __webpack_public_path__ + \"static/media/madrid.2b5e3c69.png\";","import React, { Component } from \"react\";\r\nimport styles from \"./NavItem.module.scss\";\r\n\r\nexport default class NavItem extends Component {\r\n    render() {\r\n        return (\r\n            <section className={styles.NavList}>\r\n                {/* <Link to={this.props.route}>{this.props.name}</Link> */}\r\n            </section>\r\n        )\r\n    }\r\n}","import NavBar from \"./NavBar\";\r\n\r\nexport default NavBar;","import React, { Component } from \"react\";\r\nimport styles from \"./NavBar.module.scss\";\r\nimport NavItem from \"../NavBar/NavItem/NavItem\";\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <section className={styles.NavBar}>\r\n                <h1>Weather Checker</h1>\r\n                <ul>\r\n                    <li className={styles.pageNav}>Weather</li>\r\n                    <li className={styles.pageNav}>Quiz</li>\r\n                    <NavItem route=\"/weather\" name=\"Weather\" />\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}","import Card from \"./Card\";\r\n\r\nexport default Card;","import React, { Component } from \"react\";\r\nimport styles from \"./Card.module.scss\";\r\n\r\n\r\nexport default class Card extends Component {\r\n    render() {\r\n        return (\r\n            <section className={styles.CardBox}>\r\n                <div className={styles.Card}>\r\n                    <h2>{this.props.city.name}</h2>\r\n                    {/* <div>{this.props.city.image}</div> */}\r\n                    {/* <img src={require(\"../../../static/images/london.png\")}/> */}\r\n                    <article className={styles.weatherData}>\r\n                    {/* <img className={styles.photo} src=\"\" alt=\"City\"/> */}\r\n                    <p>Temp: {this.props.city.main.temp}&deg;C</p>\r\n                    <p>{this.props.city.main.description}</p>\r\n                    <p>Humidity: {this.props.city.main.humidity}%</p>\r\n                    <p>Min Temp: {this.props.city.main.temp_min}&deg;C</p>\r\n                    <p>Max Temp: {this.props.city.main.temp_max}&deg;C</p>\r\n                    </article>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import CardList from \"./CardList\";\r\n\r\nexport default CardList;","import React, { Component } from \"react\";\r\nimport styles from \"./CardList.module.scss\";\r\nimport Card from \"./Card\";\r\n\r\nexport default class CardList extends Component {\r\nstate = {\r\n    cityName: [\r\n        { city_id: 2643744, image: require(\"../../static/images/london.png\") },\r\n        { city_id: 2988507, image: require(\"../../static/images/london.png\") },\r\n        { city_id: 5128581, image: require(\"../../static/images/london.png\") },\r\n        { city_id: 2147714, image: require(\"../../static/images/london.png\") },\r\n        { city_id: 2950159, image: require(\"../../static/images/london.png\") },\r\n        { city_id: 3117735, image: require(\"../../static/images/london.png\") }\r\n    ],\r\n    filteredCities: []\r\n}\r\n\r\ncomponentDidMount() {\r\n    let string = \"\";\r\n    this.state.cityName.forEach(city => string += `${city.city_id},`)\r\n    fetch(`https://api.openweathermap.org/data/2.5/group?id=${string}&units=metric&appid=0f33f5c78acf44e7d38b5f6706f6f59d`)\r\n        .then(response => response.json())\r\n        .then(cities => {\r\n            this.setState({ filteredCities: cities['list'] });\r\n        })\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <section className={styles.CardList}>\r\n                {this.state.filteredCities.map((city, index) => (\r\n                    <Card city={city} key={index}/>  \r\n                ))}\r\n            \r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Router, Redirect, globalHistory } from \"@reach/router\";\r\nimport CardList from \"../../components/CardList\";\r\n\r\nexport default class Routes extends Component {\r\n    render() {\r\n        return (\r\n            <section>\r\n            <Router>\r\n                <Redirect noThrow from=\"/\" to=\"weather\" />\r\n                {/* <CardList path=\"weather\" /> */}\r\n            </Router>\r\n            </section>\r\n        )\r\n    }\r\n}","import PhotoSlide from \"./PhotoSlide\";\r\n\r\nexport default PhotoSlide;","import React, { Component } from \"react\";\r\nimport styles from \"./PhotoSlide.module.scss\";\r\nimport SimpleImageSlider from \"react-simple-image-slider\";\r\n\r\n\r\nexport default class PhotoSlide extends Component {\r\n    render() {\r\n        // const images = [\r\n        //     { url: require(\"../../static/images/london.png\") },\r\n        //     { url: require(\"../../static/images/paris.png\") },\r\n        //     { url: require(\"../../static/images/newyork.png\") },\r\n        //     { url: require(\"../../static/images/sydney.png\") },\r\n        //     { url: require(\"../../static/images/berlin.png\") },\r\n        //     { url: require(\"../../static/images/madrid.png\") },\r\n        // ];\r\n        return (\r\n            <section className={styles.photoBox}>\r\n\r\n                <img className={styles.photo} src={require(\"../../static/images/london.png\")} />\r\n                <img className={styles.photo} src={require(\"../../static/images/paris.png\")} />\r\n                <img className={styles.photo} src={require(\"../../static/images/newyork.png\")} />\r\n                <img className={styles.photo} src={require(\"../../static/images/sydney.png\")} />\r\n                <img className={styles.photo} src={require(\"../../static/images/berlin.png\")} />\r\n                <img className={styles.photo} src={require(\"../../static/images/madrid.png\")} />\r\n    \r\n                {/* <SimpleImageSlider \r\n                    width={300}\r\n                    height={300}\r\n                    images={images}\r\n                    \r\n                    navStyle={2}\r\n                    \r\n                /> */}\r\n\r\n             \r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.module.scss';\r\nimport NavBar from '../../components/NavBar';\r\nimport CardList from '../../components/CardList';\r\nimport Routes from '../../containers/routes/Routes';\r\nimport PhotoSlide from '../../components/PhotoSlide';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <section>\r\n        <NavBar />\r\n        <PhotoSlide />\r\n        <CardList />\r\n        <Routes />\r\n      </section>\r\n    \r\n    );\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}